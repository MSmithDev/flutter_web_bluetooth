part of js_web_bluetooth;

///
/// A class for calling methods and values for a [BluetoothDevice].
///
/// You can get a [WebBluetoothDevice] by calling [Bluetooth.requestDevice].
///
/// See:
///
/// - [Bluetooth]
///
/// - https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice
///
/// - https://webbluetoothcg.github.io/web-bluetooth/#bluetoothdevice-interface
///
class WebBluetoothDevice {
  final Object _jsObject;

  String? _id;

  ///
  /// Get the id of the device.
  ///
  /// This id is randomly generated by the browser. A new id is generated for
  /// each session unless a flag is used to remember previously connected
  /// devices.
  ///
  /// The browser may decide how this is generated. On Chrome this is 128
  /// randomly generated bits that are encoded in base 64.
  ///
  /// See:
  ///
  /// - https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice/id
  ///
  /// - https://webbluetoothcg.github.io/web-bluetooth/#dom-bluetoothdevice-id
  ///
  String get id {
    var id = _id;
    if (id != null) {
      return id;
    }
    id = _JSUtil.getProperty(_jsObject, 'id') as String;
    _id = id;
    return id;
  }

  String? _name;

  ///
  /// A human readable name of the device.
  ///
  /// This name comes straight from the device itself.
  ///
  /// See:
  ///
  /// - https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice/name
  ///
  /// - https://webbluetoothcg.github.io/web-bluetooth/#dom-bluetoothdevice-name
  ///
  String? get name {
    var name = _name;
    if (name != null) {
      return name;
    }
    if (!_JSUtil.hasProperty(_jsObject, 'name')) {
      return null;
    }
    name = _JSUtil.getProperty(_jsObject, 'name') as String?;
    _name = name;
    return name;
  }

  NativeBluetoothRemoteGATTServer? _gatt;

  ///
  /// Get a reference to the [NativeBluetoothRemoteGATTServer] to communicate
  /// with the [WebBluetoothRemoteGATTService]s.
  ///
  /// Some devices may allow you to find them, but they are on a blocklist
  /// restricting the ability to communicate with its GATT service. In this
  /// case the returned value will be `null`.
  ///
  /// See:
  ///
  /// - https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice/gatt
  ///
  /// - https://webbluetoothcg.github.io/web-bluetooth/#dom-bluetoothdevice-gatt
  ///
  NativeBluetoothRemoteGATTServer? get gatt {
    final gatt = _gatt;
    if (gatt != null) {
      return gatt;
    }
    if (!_JSUtil.hasProperty(_jsObject, 'gatt')) {
      return null;
    }
    final newGatt = _JSUtil.getProperty(_jsObject, 'gatt');
    if (newGatt != null) {
      try {
        _gatt = NativeBluetoothRemoteGATTServer.fromJSObject(newGatt, this);
      } catch (e) {
        if (e is UnsupportedError) {
          print(
              'flutter_web_bluetooth: Could not convert JSObject to BluetoothRemoteGattServer. Error: "${e.message}"');
        } else {
          rethrow;
        }
      }
    }
    return _gatt;
  }

  ///
  /// Add a new event listener to the device.
  ///
  /// Marking the method with [JSUtils.allowInterop] will be done automatically
  /// for you.
  ///
  /// Events to be handled are:
  ///
  /// - onadvertisementreceived
  ///
  /// - ongattserverdisconnected
  ///
  /// - onserviceadded
  ///
  /// - onservicechanged
  ///
  /// - onserviceremoved
  ///
  /// - oncharacteristicvaluechanged
  ///
  /// See:
  ///
  /// - [removeEventListener]
  ///
  /// - https://webbluetoothcg.github.io/web-bluetooth/#bluetoothdeviceeventhandlers
  ///
  /// - https://webbluetoothcg.github.io/web-bluetooth/#serviceeventhandlers
  ///
  /// - https://webbluetoothcg.github.io/web-bluetooth/#characteristiceventhandlers
  ///
  void addEventListener(String type, void Function(dynamic) listener) {
    _JSUtil.callMethod(
        _jsObject, 'addEventListener', [type, _JSUtil.allowInterop(listener)]);
  }

  ///
  /// Remove an event listener that has previously been added.
  ///
  /// Marking the method with [JSUtils.allowInterop] will be done automatically
  /// for you.
  ///
  /// See: [addEventListener].
  ///
  void removeEventListener(String type, void Function(dynamic) listener) {
    /// TODO: may need to tell the developer to store the listener that you get
    /// after throwing it through _JSUtil.allowInterop.
    _JSUtil.callMethod(_jsObject, 'removeEventListener',
        [type, _JSUtil.allowInterop(listener)]);
  }

  ///
  /// Create a new instance from a js object.
  ///
  /// **This should only be done by the library or if you're testing.**
  ///
  /// To get an instance use [Bluetooth.requestDevice].
  ///
  WebBluetoothDevice.fromJSObject(this._jsObject) {
    if (!_JSUtil.hasProperty(_jsObject, 'id')) {
      throw UnsupportedError('JSObject does not have an id.');
    }
  }
}
